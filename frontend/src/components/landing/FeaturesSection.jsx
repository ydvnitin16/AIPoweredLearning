// src/components/landing/FeaturesSection.jsx
import React, { useState, useMemo } from "react";
import image from "../../assets/AiPoweredImage.png";

export default function FeaturesSection() {
  const categories = useMemo(
          () => [
              {
                  key: 'Notes',
                  title: 'Smart Notes',
                  text: 'Create and organize topics with structured AI-assisted content. Add images, formulas, and text for clear, study-ready notes.',
                  desc: [
                      'AI-assisted topic content generation',
                      'Add images, formulas, and code snippets',
                      'Organize by subjects and topics',
                  ],
                  img: image,
              },
              {
                  key: 'Flashcards',
                  title: 'Flashcards',
                  text: 'Generate flashcards directly from your topics. Track progress and mark concepts as done to manage your learning flow.',
                  desc: [
                      'Instant flashcard creation from topics',
                      'Mark topics as done for progress tracking',
                      'Supports key concept memorization',
                  ],
                  img: image,
              },
              {
                  key: 'Quizzes',
                  title: 'Quizzes',
                  text: 'Test your understanding with automatically generated quizzes from your topics. Focus on learning and retention.',
                  desc: [
                      'Create quizzes from topic content',
                      'Multiple-choice questions included',
                      'Track learning progress',
                  ],
                  img: image,
              },
              {
                  key: 'Summaries',
                  title: 'Topic Summaries',
                  text: 'Quickly review the main points of each topic generated by AI, helping you revise effectively.',
                  desc: [
                      'AI-generated topic summaries',
                      'Highlight main points for quick revision',
                  ],
                  img: image,
              },
              {
                  key: 'Visualizations',
                  title: 'Interactive Diagrams',
                  text: 'Visualize relationships and ideas with React Flow and Viz.js for easier comprehension of complex topics.',
                  desc: [
                      'Flow-based concept diagrams (React Flow)',
                      'Graphical representations (Viz.js)',
                  ],
                  img: image,
              },
              {
                  key: 'AI Tutor',
                  title: 'AI Tutor',
                  text: 'Ask questions and get AI-generated explanations and expansions for your topics to clarify concepts.',
                  desc: [
                      'Step-by-step explanations',
                      'AI-based guidance on topics',
                  ],
                  img: image,
              },
          ],
          []
      );

  const [activeKey, setActiveKey] = useState(categories[0].key);
  const activeCategory = useMemo(() => categories.find((c) => c.key === activeKey), [activeKey, categories]);

  return (
    <section id="features" className="py-20 border-t border-slate-200 bg-white dark:bg-zinc-900 dark:border-slate-800">
      <div className="max-w-7xl mx-auto px-6">
        <h3 className="text-3xl md:text-4xl font-bold text-center mb-4 text-slate-900 dark:text-white">
          Everything You Need to Learn Smarter
        </h3>
        <p className="text-slate-600 dark:text-slate-300 text-center max-w-2xl mx-auto mb-10">
          Explore our powerful AI tools designed to accelerate your learning journey.
        </p>

        <div className="flex flex-wrap justify-center gap-3 md:gap-4 mb-10">
          {categories.map((c) => (
            <button
              key={c.key}
              onClick={() => setActiveKey(c.key)}
              className={`px-4 py-2 rounded-full text-sm font-medium transition cursor-pointer ${
                activeKey === c.key
                  ? "bg-gradient-to-r from-violet-600 to-indigo-600 text-white shadow"
                  : "bg-slate-200 dark:bg-slate-800 text-slate-700 dark:text-slate-300 hover:bg-slate-300 dark:hover:bg-slate-700"
              }`}
            >
              {c.key}
            </button>
          ))}
        </div>

        <div className="grid md:grid-cols-2 gap-10 md:gap-12 items-center">
          <div>
            <h4 className="text-2xl font-semibold mb-4 text-slate-900 dark:text-white">
              {activeCategory.title}
            </h4>
            <p className="font-semibold dark:text-[#a3a3a3] text-slate-700 mb-4">{activeCategory.text}</p>
            <ul className="space-y-2 mb-6 font-semibold">
              {activeCategory.desc.map((d, i) => (
                <li key={i} className="flex items-start gap-2 text-slate-700 dark:text-[#a3a3a3]">
                  <span>âœ“</span> {d}
                </li>
              ))}
            </ul>
          </div>
          <div className="flex justify-center">
            <img
              src={activeCategory.img}
              alt={activeCategory.title}
              className="rounded-xl border border-slate-200 dark:border-slate-700 shadow-lg w-full max-w-md"
            />
          </div>
        </div>
      </div>
    </section>
  );
}
